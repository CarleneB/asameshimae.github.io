<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">

    <link href="https://fonts.googleapis.com/css?family=Zilla+Slab" rel="stylesheet"> 

    <style type="text/css">
    body {    
        /* Coolors Exported Palette - coolors.co/88d18a-ccddb7-6a5b6e-f0b7b3-a833b9 */
        --color1: #88d18a;     /* dark sea green */
        --color2: #ccddb7;    /* pastel grey */
        --color3: #6a5b6e;    /* dim grey */
        --color4: #f0b7b3;    /* melon */
        --color5: #a833b9;    /* dark orchid */

        background-color: var(--color3);
        color: var(--color4);

    font-family: 'Zilla Slab', serif;
        font-size: 5em;

        margin:1em 1em 1em 2em;
    }
    #card, #leaders {
        padding-left:.2em;
        height:2em;
    }
  @media screen and (min-width: 1000px) {
    #leaders { display:inline-block; }
  }
  @media screen and (max-width: 1000px) {
    #leaders { display:none; }
  }
  #leaders {
    float:right;
    height:auto;
    padding-left:3em;
    /*border-left:1px dotted var(--color4);*/
    min-height:13em;
    font-size: .3em;
    background-color: var(--color3);
  }
  #leaders h3 {
    font-size: 1em;
    font-weight: normal;
    color: var(--color1);
    margin:0em;
  }
  a,a:active,a:visited {
    text-decoration: none;
    padding:.2em;
  }
  #vote {
    margin-top:.8em;
    padding-top:.4em;
    border-top:1px dotted var(--color4);
  }
  #vBd { color: var(--color4); }
  #vOk { color: var(--color2); }
  #vGd { color: var(--color1); }
  #vEp { color: var(--color1); }
    </style>

  <title>Voterater</title>
</head>
<body>

  <div id="leaders">...</div>

  <div id="card">...</div>

  <div id="vote">
    <a href="#" id="vBd" data-vote="0">üòû</a><a href="#" id="vOk" data-vote="1">üòê</a><a href="#" id="vGd" data-vote="2">üòä</a><a href="#" id="vEp" data-vote="4">üòÇ</a> 
  </div>


  <script type="text/javascript">
    /* constants */
    const keyGS = 'AKfycbzSpeYhp_HZ6sncI6iHK4plCcG-VvhZYamMJFeQ7mgTI8nEhqp5'
    const roundels = 
      [...t='...|..:|.:.|:..|...'.split`|`,
      ...[';;;',':::',';;;'],
      ...t.reverse()]
    const cardBatchSize = 10

    /* variables */
    let roundelPos = {card:0,leaders:0}
    let cardPile = []
    let leaderPile = []
    let newCard = {}
    let [loadingData,loadingLeaders] = [true,true]

    /* simple templaters */
    const urlReq = (set,n=cardBatchSize)=>`https://script.google.com/macros/s/${keyGS}/exec?set=${set}&n=${n}`
    const urlLeaders = (set)=>`https://script.google.com/macros/s/${keyGS}/exec?set=${set}&show=leaders`
    const urlVote = (itemid,name,vote)=>`https://script.google.com/macros/s/${keyGS}/exec?itemid=${itemid}&hash=${name.hashCode()}&vote=${vote}`

    /* reusable functions */
    // SOURCE: https://stackoverflow.com/a/7616484
    String.prototype.hashCode = function() {
      var hash=0, i, chr
      if (this.length===0) return hash
      for (i=0;i<this.length;i++) {
        chr=this.charCodeAt(i)
        hash=((hash<<5)-hash)+chr
        hash|=0 // Convert to 32bit integer
      }
      return hash;
    }

    /* app-specific functions */

    // display a beautiful loading animation
    const showRoundel = elem => setInterval(()=>document.querySelector(`#${elem}`).textContent=roundels[(++roundelPos[elem])%roundels.length],120)

    // add a new batch of cards to the bottom of the pile
    const replenishCards = (set='bandstowns') => fetch(urlReq(set))
      .then(r=>r.json())
      .then(json=>cardPile.push(...json.data))
      .then(()=>console.log('replenished'))

    const refreshLeaders = (set='bandstowns') => fetch(urlLeaders(set))
      .then(r=>r.json())
      .then(json=>leaderPile=json.data)
      .then(()=>clearInterval(loadingLeaders))
      .then(()=>document.querySelector('#leaders').innerHTML='<h3>The beautiful ones:</h3>'+leaderPile.map(e=>e.entry).join('<br/>'))

    // update the card area with a new entry to vote on
    const drawCard = function() {
        console.log(cardPile.length)

      if(loadingData) loadingData=clearInterval(loadingData)
      if(cardPile.length<cardBatchSize) replenishCards()

      newCard = cardPile.shift()
      if(newCard) {
        card = document.querySelector('#card')
        card.textContent = card.dataset.entry = newCard.entry
        card.dataset.id = newCard.id      
      } else replenishCards().then(r=>drawCard())
    }

    const vote = vote => fetch(urlVote(newCard.id,newCard.entry,vote))
      .then(drawCard())

    /* app init */

    loadingData = showRoundel('card')
    loadingLeaders = showRoundel('leaders')

    // add event listeners to voting buttons
    document.querySelectorAll('#vote a').forEach(e=>e.addEventListener('click',function(){
      vote(this.dataset.vote)
      // drawCard()
    }))

    replenishCards().then(r=>drawCard())
    refreshLeaders()

  </script>
</body>
</html>
